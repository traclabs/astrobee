# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# 
# All rights reserved.
# 
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

cmake_minimum_required(VERSION 2.8.3)

project(traj_opt_pro)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wno-deprecated-declarations  -Werror=return-type")
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake")


############################ Optional Build Params #############################
set(BUILD_GUROBI TRUE) # Commercial backend
set(INTEL_MKL FALSE)   # Use Intel's Math Kernel Library (Not faster on an i7) 
############################ End Optional Params ###############################

# Find optional packages
if(BUILD_GUROBI)
  find_package(GUROBI REQUIRED)
  include_directories(${GUROBI_INCLUDE_DIRS})
endif()
if(INTEL_MKL)
   add_definitions(-DEIGEN_USE_MKL_ALL)
   find_package(IntelMKL REQUIRED)
   set(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} -Wl,--no-as-needed -lpthread -lm -ldl" )
   set(CMAKE_SHARED_LINKER_FLAGS  "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-as-needed -lpthread -lm -ldl" )
  include_directories(${INTEL_MKL_INCLUDES})
endif()

# Find required packages
find_package(catkin_simple REQUIRED)

find_package(Eigen3 REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR})
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIR})


catkin_simple()

# Add libraries
cs_add_library(ff_common src/polynomial_basis.cpp src/trajectory_solver.cpp)

if(BUILD_GUROBI)
  cs_add_library(gurobi_backend src/gurobi_solver.cpp  src/gurobi_trajectory.cpp )
  target_link_libraries(gurobi_backend ff_common ${GUROBI_LIBRARIES})
endif()

cs_add_library(fancy_custom_backend src/nonlinear_polynomial.cpp  src/nonlinear_solver.cpp  src/nonlinear_trajectory.cpp)
target_link_libraries(fancy_custom_backend ff_common ${OpenCV_LIBRARIES})

# Catkin simple stuff
cs_install()

cs_export(DEPENDS OpenCV)
