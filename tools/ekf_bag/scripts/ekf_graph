#!/usr/bin/python
#
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import argparse
import os

import ekf_graph

if __name__ == '__main__':
  epilog_msg = """
  The arguments BAG or MAP could be ommitted if specificed with the following 
  environement variables:
    - ASTROBEE_BAG instead of positional argument 1 BAG
    - ASTROBEE_MAP instead of positional argument 2 MAP
  
  If [-r ROBOT] in not used, then the robot configuration file should be copied 
  locally as 'robot.config'.
  """
  parser = argparse.ArgumentParser(description='Graph the EKF from a ros bag file.',
                                   epilog=epilog_msg,
                                   formatter_class=argparse.RawDescriptionHelpFormatter)
  parser.add_argument('-e',
                      '--ekf_in_bag',
                      dest='ekf_in_bag',
                      action='store_true',
                      help='Use EKF message from bag instead of running EKF on images.')
  parser.add_argument('-f',
                      '--features_in_bag',
                      dest='features_in_bag',
                      action='store_true',
                      help='Use feature message from bag in EKF instead of generating from images.')
  parser.add_argument('-r',
                      '--robot_name',
                      dest='robot_name',
                      metavar='ROBOT',
                      help='Specify the robot to use (just name, not path).')
  parser.add_argument('-i', '--image_topic', dest='image_topic', default=None, help='Use specified image topic.')
  parser.add_argument('--start',
                      dest='start_time',
                      type=float,
                      default=float('-inf'),
                      help='Only graph starting from this time.')
  parser.add_argument('--end',
                      dest='end_time',
                      type=float,
                      default=float('inf'),
                      help='Only graph ending from this time.')
  parser.add_argument('bag_file', metavar='BAG', nargs='?', help='bag to process')
  parser.add_argument('map_file', metavar='MAP', nargs='?', help='map to use')
  parser.add_argument('--cached',
                      dest='cached',
                      action='store_true',
                      help='Do not rerun EKF, draw graph only from text file.')
  parser.add_argument('--save_stats', action='store_true', help='Save stats to csv file.')
  parser.add_argument('--make_plots', type=bool, default=True, help='Make pdf of plots of results.')

  args, args_unkonown = parser.parse_known_args()
  name_prefix = os.path.splitext(args.bag_file)[0]
  ekf_output_file = name_prefix + '.txt'
  pdf_output_file = name_prefix + '.pdf'
  results_csv_output_file = name_prefix + '_results.csv'
  options = ekf_graph.RunEKFOptions(args.bag_file, args.map_file, ekf_output_file, pdf_output_file,
                                    results_csv_output_file)
  options.set_command_line_params(args)
  ekf_graph.run_ekf_and_save_stats(options)
