#!/usr/bin/python
#
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

from scipy.spatial.transform import Slerp
from scipy.spatial.transform import Rotation as R
import matplotlib
matplotlib.use('pdf')
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import argparse
import os
import os.path
import math
import copy

def quat_to_euler(q):
    q2q2 = q[1] * q[1]
    x = math.atan2(2 * (q[0] * q[3] + q[1] * q[2]),
                   1 - 2 * (q[0] * q[0] + q2q2))
    arg = max(-1.0, min(1.0, 2 * (q[1] * q[3] - q[0] * q[2])))
    y = math.asin(arg)
    z = math.atan2(2 * (q[0] * q[1] + q[2] * q[3]),
                   1 - 2 * (q2q2 + q[2] * q[2]))
    return (x, y, z)

def parse_args():
    epilog_msg = """
    Input > 2 text files containing EKF output
    """
    parser = argparse.ArgumentParser(
        description='Graph the EKF from a ros bag file.',
        epilog=epilog_msg,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(
        '-s',
        '--start',
        dest='start_time',
        type=float,
        default=float('-inf'),
        help='time to start parsing in seconds')
    parser.add_argument(
        '-e',
        '--stop',
        dest='stop_time',
        type=float,
        default=float('inf'),
        help='time to stop parsing in seconds')
    parser.add_argument(
        '-p',
        '--period',
        dest='period',
        type=float,
        default=0,
        help='minimum time difference between pose estimations in seconds')
    parser.add_argument(
        '-i',
        '--interpolate',
        dest='interpolate',
        action='store_true',
        help='resample data to match the first text file rather than nearest neighbor')
    parser.add_argument(
        '-r',
        '--relative_poses',
        dest='relative_poses',
        action='store_true',
        help='plot relative poses rather than absolute poses')
    parser.add_argument('-m', '--map', dest='map', action='store_true',
                        help='generate a heatmap based on the first text file')
    parser.add_argument(
        '-sm',
        '---sparse_map',
        dest='sparse_map',
        action='store_true',
        help='use the sparse mapping poses instead of ekf poses from the first text file (ignore covariance plots)')
    parser.add_argument(
        '-l',
        '--limit',
        dest='interpolation_limit',
        type=float,
        default=float('0'),
        help='if interpolation is enabled, cutoff to interpolate rather than use nearest neighbor')
    parser.add_argument('ekf_files', metavar='EKF', nargs='+',
                        help='text files containing ekf outputs from ekf_graph')
    args, args_unknown = parser.parse_known_args()
    return args

def csv_to_dictionaries(args):
    ekfs = []
    ekfs.append({'t': [],
                 'x': [],
                 'y': [],
                 'z': [],
                 'angle1': [],
                 'angle2': [],
                 'angle3': [],
                 'vx': [],
                 'vy': [],
                 'vz': [],
                 'ox': [],
                 'oy': [],
                 'oz': [],
                 'ax': [],
                 'ay': [],
                 'az': [],
                 'abx': [],
                 'aby': [],
                 'abz': [],
                 'gbx': [],
                 'gby': [],
                 'gbz': [],
                 'c': [],
                 's': [],
                 'ml_count': [],
                 'of_count': [],
                 'mahal': []})
    for i in range(1, 16):
        ekfs[0]['cov_' + str(i)] = []
    for i in range(len(args.ekf_files) - 1):
        ekfs.append(copy.deepcopy(ekfs[0]))

    mahals = []
    mahals.append({'times': [], 'boxes': []})
    for i in range(len(args.ekf_files) - 1):
        mahals.append(copy.deepcopy(mahals[0]))

    filenames = []
    original_ekf = []

    counter = 0

    # generate a dictionary for each individual text file
    for i in range(len(args.ekf_files)):
        filenames.append(args.ekf_files[i])
        f1 = open(filenames[i], 'r')
        last_time = float('-inf')
        original_ekf.append({'x': [],
                             'y': [],
                             'z': [],
                             'angle1': [],
                             'angle2': [],
                             'angle3': [],
                             'cov_1': [],
                             'cov_2': [],
                             'cov_3': [],
                             'cov_7': [],
                             'cov_8': [],
                             'cov_9': [],
                             'cov_13': [],
                             'cov_14': [],
                             'cov_15': []})
        for l in f1:
            p = l.split(' ')
            if (
                i != 0 or not args.sparse_map) and l.startswith('EKF ') and float(
                p[1]) >= args.start_time and float(
                p[1]) <= args.stop_time and float(
                    p[1]) - last_time > args.period:
                last_time = float(p[1])
                ekfs[i]['t']        .append(float(p[1]))
                ekfs[i]['x']        .append(float(p[2]))
                ekfs[i]['y']        .append(float(p[3]))
                ekfs[i]['z']        .append(float(p[4]))
                ekfs[i]['angle1']   .append(float(p[5]) * 180 / math.pi)
                ekfs[i]['angle2']   .append(float(p[6]) * 180 / math.pi)
                ekfs[i]['angle3']   .append(float(p[7]) * 180 / math.pi)
                ekfs[i]['vx']       .append(float(p[8]))
                ekfs[i]['vy']       .append(float(p[9]))
                ekfs[i]['vz']       .append(float(p[10]))
                ekfs[i]['ox']       .append(float(p[11]) * 180 / math.pi)
                ekfs[i]['oy']       .append(float(p[12]) * 180 / math.pi)
                ekfs[i]['oz']       .append(float(p[13]) * 180 / math.pi)
                ekfs[i]['ax']       .append(float(p[14]))
                ekfs[i]['ay']       .append(float(p[15]))
                ekfs[i]['az']       .append(float(p[16]))
                ekfs[i]['abx']      .append(float(p[17]))
                ekfs[i]['aby']      .append(float(p[18]))
                ekfs[i]['abz']      .append(float(p[19]))
                ekfs[i]['gbx']      .append(float(p[20]) * 180 / math.pi)
                ekfs[i]['gby']      .append(float(p[21]) * 180 / math.pi)
                ekfs[i]['gbz']      .append(float(p[22]) * 180 / math.pi)
                ekfs[i]['c']        .append(int(p[23]))
                ekfs[i]['s']        .append(int(p[24]))
                ekfs[i]['ml_count'] .append(int(p[25]))
                if ekfs[i]['ml_count'][-1] == 0:
                    ekfs[i]['ml_count'][-1] = float('nan')
                ekfs[i]['of_count'] .append(int(p[26]))
                if ekfs[i]['of_count'][-1] == 0:
                    ekfs[i]['of_count'][-1] = float('nan')
                for j in range(1, 16):
                    ekfs[i]['cov_' +
                            str(j)].append(math.sqrt(abs(float(p[26 + j]))))
                # convert quaternion to euler angles
                q = (0.5 * ekfs[i]['cov_1'][-1], 0.5 * ekfs[i]
                     ['cov_2'][-1], 0.5 * ekfs[i]['cov_3'][-1], 1.0)
                euler = quat_to_euler(q)
                ekfs[i]['cov_1'][-1] = euler[0]
                ekfs[i]['cov_2'][-1] = euler[1]
                ekfs[i]['cov_3'][-1] = euler[2]
                m = []
                MAHAL_MAX = 30.0
                for j in range(50):
                    t = float(p[42 + j])
                    if not math.isnan(t) and t > 0.0:
                        m.append(min(t, MAHAL_MAX))
                if len(m) > 0:
                    mahals[i]['times'].append(float(p[1]))
                    mahals[i]['boxes'].append(m)
                ekfs[i]['mahal'].append(m)
                # if -r is used, record relative differences between poses
                for key in original_ekf[i]:
                    original_ekf[i][key].append(ekfs[i][key][-1])
                if args.relative_poses and not args.sparse_map and len(
                        ekfs[i]['t']) > 1:
                    for key in original_ekf[i]:
                        ekfs[i][key][-1] = (ekfs[i][key][-1] -
                                            original_ekf[i][key][-2])
            elif i == 0 and args.sparse_map and l.startswith('VL ') and float(p[1]) >= args.start_time and float(p[1]) <= args.stop_time and float(p[1]) - last_time > args.period:
                last_time = float(p[1])
                ekfs[i]['t']        .append(float(p[1]))
                ekfs[i]['x']        .append(float(p[3]))
                ekfs[i]['y']        .append(float(p[4]))
                ekfs[i]['z']        .append(float(p[5]))
                ekfs[i]['angle1']   .append(float(p[6]) * 180 / math.pi)
                ekfs[i]['angle2']   .append(float(p[7]) * 180 / math.pi)
                ekfs[i]['angle3']   .append(float(p[8]) * 180 / math.pi)
                for j in range(1, 16):
                    ekfs[i]['cov_' + str(j)].append(0)
                # if -r is used, record positions relative to the initial pose to
                # fix for vio
                for key in original_ekf[i]:
                    original_ekf[i][key].append(ekfs[i][key][-1])

                if args.relative_poses and len(ekfs[i]['t']) > 1:
                    for key in ['t', 'x', 'y', 'z', 'angle1', 'angle2', 'angle3']:
                        ekfs[i][key][-1] = (ekfs[i][key][-1] - ekfs[i][key][0])
                counter += 1

        if args.relative_poses:  # with relative poses, the starting pose is the origin
            ekfs[i]['x'][0] = 0
            ekfs[i]['y'][0] = 0
            ekfs[i]['z'][0] = 0
            ekfs[i]['angle1'][0] = 0
            ekfs[i]['angle2'][0] = 0
            ekfs[i]['angle3'][0] = 0
    return filenames, ekfs, original_ekf

# record the differences between each possible pair of datasets
def generate_pdfs(filenames, ekfs, original_ekf, args):
    for i in range(len(ekfs)):

        # add baseline data to the heatmap (assuming first dataset is ground
        # truth/what we want to compare)
        if args.map and i == 0:
            heatMapData = [[], [], []]
            covMapData = {'p': [[], [], []], 'v': [[], [], []], 'o': [[], [], []]}
            for j in range(len(ekfs[i]['t'])):
                heatMapData[0].append(
                    ((ekfs[i]['x'][j]**2) + (ekfs[i]['y'][j]**2) + (ekfs[i]['z'][j]**2))**0.5)
                heatMapData[1].append([])

                covMapData['p'][0].append(
                    (abs(ekfs[i]['cov_13'][j]) + abs(ekfs[i]['cov_14'][j]) + abs(ekfs[i]['cov_15'][j]))**0.5)
                covMapData['p'][1].append([])
                covMapData['v'][0].append(
                    (abs(ekfs[i]['cov_7'][j]) + abs(ekfs[i]['cov_8'][j]) + abs(ekfs[i]['cov_9'][j]))**0.5)
                covMapData['v'][1].append([])
                covMapData['o'][0].append(
                    (abs(ekfs[i]['cov_1'][j]) + abs(ekfs[i]['cov_2'][j]) + abs(ekfs[i]['cov_3'][j]))**0.5)
                covMapData['o'][1].append([])

        for j in range(i + 1, len(ekfs)):
            diffs = {
                't': [],
                'x': [],
                'y': [],
                'z': [],
                'angle1': [],
                'angle2': [],
                'angle3': []}
            averages = {
                'x': 0,
                'y': 0,
                'z': 0,
                'angle1': 0,
                'angle2': 0,
                'angle3': 0}
            n = 0
            for ki in range(
                    len(ekfs[i]['t'])):  # loop through indices in the first dataset
                n += 1

                if ki >= len(ekfs[i]['t']) or ki >= len(ekfs[j]['t']):
                    break
                kj = ki
                error = ekfs[i]['t'][ki] - ekfs[j]['t'][ki]

                # use nearest neighbor to pick an index for the second dataset
                if error > 0:
                    error = abs(error)
                    while kj + 1 < len(ekfs[j]['t']):
                        newerror = abs(ekfs[i]['t'][ki] - ekfs[j]['t'][kj + 1])
                        if newerror < error:
                            error = newerror
                            kj += 1
                        else:
                            break
                elif error < 0:
                    error = abs(error)
                    while kj - 1 >= 0:
                        newerror = abs(ekfs[i]['t'][ki] - ekfs[j]['t'][kj - 1])
                        if newerror < error:
                            error = newerror
                            kj -= 1
                        else:
                            break

                diffs['t'].append(ekfs[i]['t'][ki])
                error = ekfs[j]['t'][kj] - ekfs[i]['t'][ki]

                # interpolate data if needed
                if args.interpolate and error > args.interpolation_limit:
                    if error > 0:
                        dt = ekfs[j]['t'][kj] - ekfs[j]['t'][kj - 1]
                        currVars = dict()
                        for var in ['x', 'y', 'z']:
                            dVar = ekfs[j][var][kj] - ekfs[j][var][kj - 1]
                            currVars[var] = ekfs[j][var][kj - 1] + \
                                dVar * error / dt
                            diffs[var].append(
                                abs(ekfs[i][var][ki] - currVars[var]))

                        startPos = [ekfs[j]['angle1'][kj - 1], ekfs[j]
                                    ['angle2'][kj - 1], ekfs[j]['angle3'][kj - 1]]
                        endPos = [
                            ekfs[j]['angle1'][kj],
                            ekfs[j]['angle2'][kj],
                            ekfs[j]['angle3'][kj]]
                        key_rots = R.from_euler(
                            'xyz', [startPos, endPos], degrees=True)
                        key_times = [ekfs[j]['t'][kj - 1], ekfs[j]['t'][kj]]
                        slerp = Slerp(key_times, key_rots)
                        times = [ekfs[i]['t'][ki]]
                        interp_rots = slerp(times).as_euler('xyz', degrees=True)[0]
                        diffs['angle1'].append(
                            abs(ekfs[i]['angle1'][ki] - interp_rots[0]))
                        diffs['angle2'].append(
                            abs(ekfs[i]['angle2'][ki] - interp_rots[1]))
                        diffs['angle3'].append(
                            abs(ekfs[i]['angle3'][ki] - interp_rots[2]))
                    elif error < 0:
                        dt = ekfs[j]['t'][kj + 1] - ekfs[j]['t'][kj]
                        currVars = dict()
                        for var in ['x', 'y', 'z']:
                            dVar = ekfs[j][var][kj + 1] - ekfs[j][var][kj]
                            currVars[var] = ekfs[j][var][kj] + dVar * error / dt
                            diffs[var].append(
                                abs(ekfs[i][var][ki] - currVars[var]))

                        startPos = [
                            ekfs[j]['angle1'][kj],
                            ekfs[j]['angle2'][kj],
                            ekfs[j]['angle3'][kj]]
                        endPos = [ekfs[j]['angle1'][kj + 1], ekfs[j]
                                  ['angle2'][kj + 1], ekfs[j]['angle3'][kj + 1]]
                        key_rots = R.from_euler(
                            'xyz', [startPos, endPos], degrees=True)
                        key_times = [ekfs[j]['t'][kj], ekfs[j]['t'][kj + 1]]
                        slerp = Slerp(key_times, key_rots)
                        times = [ekfs[i]['t'][ki]]
                        interp_rots = slerp(times).as_euler('xyz', degrees=True)[0]
                        diffs['angle1'].append(
                            abs(ekfs[i]['angle1'][ki] - interp_rots[0]))
                        diffs['angle2'].append(
                            abs(ekfs[i]['angle2'][ki] - interp_rots[1]))
                        diffs['angle3'].append(
                            abs(ekfs[i]['angle3'][ki] - interp_rots[2]))
                    if args.map and i == 0:  # add current point to the heatmap
                        heatMapData[1][ki].append(
                            ((currVars['x']**2) + (currVars['y']**2) + (currVars['z']**2))**0.5)
                else:  # store nearest neighbor data
                    diffs['x'].append(abs(ekfs[i]['x'][ki] - ekfs[j]['x'][kj]))
                    diffs['y'].append(abs(ekfs[i]['y'][ki] - ekfs[j]['y'][kj]))
                    diffs['z'].append(abs(ekfs[i]['z'][ki] - ekfs[j]['z'][kj]))
                    diffs['angle1'].append(
                        abs(ekfs[i]['angle1'][ki] - ekfs[j]['angle1'][kj]))
                    diffs['angle2'].append(
                        abs(ekfs[i]['angle2'][ki] - ekfs[j]['angle2'][kj]))
                    diffs['angle3'].append(
                        abs(ekfs[i]['angle3'][ki] - ekfs[j]['angle3'][kj]))

                    if args.map and i == 0:  # add current point to the heatmap
                        heatMapData[1][ki].append(
                            ((ekfs[j]['x'][kj]**2) + (ekfs[j]['y'][kj]**2) + (ekfs[j]['z'][kj]**2))**0.5)

                if args.map and i == 0:  # add covariances to their respective heatmaps
                    covMapData['p'][1][ki].append(
                        (abs(ekfs[j]['cov_13'][kj]) + abs(ekfs[j]['cov_14'][kj]) + abs(ekfs[j]['cov_15'][kj]))**0.5)
                    covMapData['v'][1][ki].append(
                        (abs(ekfs[j]['cov_7'][kj]) + abs(ekfs[j]['cov_8'][kj]) + abs(ekfs[j]['cov_9'][kj]))**0.5)
                    covMapData['o'][1][ki].append(
                        (abs(ekfs[j]['cov_1'][kj]) + abs(ekfs[j]['cov_2'][kj]) + abs(ekfs[j]['cov_3'][kj]))**0.5)

                averages['x'] += diffs['x'][-1]**2
                averages['y'] += diffs['y'][-1]**2
                averages['z'] += diffs['z'][-1]**2
                averages['angle1'] += diffs['angle1'][-1]**2
                averages['angle2'] += diffs['angle2'][-1]**2
                averages['angle3'] += diffs['angle3'][-1]**2

            # add graphs and RMSE data to the pdf for this pair
            with PdfPages(filenames[i][:filenames[i].rfind('.')] + '_' + filenames[j][:filenames[j].rfind('.')] + ".pdf") as pdf:
                plt.figure()
                plt.plot(
                    diffs['t'],
                    diffs['x'],
                    'r',
                    linewidth=0.5,
                    label='EKF Pos. Dif. (X)')
                plt.plot(
                    diffs['t'],
                    diffs['y'],
                    'b',
                    linewidth=0.5,
                    label='EKF Pos. Dif. (Y)')
                plt.plot(
                    diffs['t'],
                    diffs['z'],
                    'g',
                    linewidth=0.5,
                    label='EKF Pos. Dif. (Z)')
                plt.xlabel('Time (s)')
                plt.ylabel('Position Difference (m)')
                plt.title('Absolute Position Difference')
                plt.legend(prop={"size": 6})
                plt.autoscale(True)
                pdf.savefig()
                plt.close()

                plt.figure()
                plt.plot(
                    diffs['t'],
                    diffs['angle1'],
                    'r',
                    linewidth=0.5,
                    label='EKF Angle Dif. (1)')
                plt.plot(
                    diffs['t'],
                    diffs['angle2'],
                    'b',
                    linewidth=0.5,
                    label='EKF Angle Dif. (2)')
                plt.plot(
                    diffs['t'],
                    diffs['angle3'],
                    'g',
                    linewidth=0.5,
                    label='EKF Angle Dif. (3)')
                plt.xlabel('Time (s)')
                plt.ylabel(r'Angle Difference ($^\circ$)')
                plt.title('Absolute Angle Difference')
                plt.legend(prop={"size": 6})
                plt.autoscale(True)
                pdf.savefig()
                plt.close()

                plt.figure()
                plt.axis('off')
                text = ""
                for key in averages:
                    averages[key] = (averages[key] / n)**0.5
                    text += key + " RMSE: " + str(averages[key]) + "\n"
                plt.text(0.0, 0.5, text)
                pdf.savefig()
                plt.close()

        # draw the heatmap
        if args.map and i == 0:
            # average the data at each point
            for j in range(len(heatMapData[1])):
                heatMapData[1][j] = sum(heatMapData[1][j]) / len(heatMapData[1][j])
                heatMapData[2].append(abs(heatMapData[0][j] - heatMapData[1][j]))
                for key in covMapData:
                    covMapData[key][1][j] = sum(
                        covMapData[key][1][j]) / len(covMapData[key][1][j])
                    covMapData[key][2].append(abs(covMapData[key][1][j]))

            maxData = max(heatMapData[2])
            covMaxData = {'p': 0, 'v': 0, 'o': 0}
            for key in covMapData:
                covMaxData[key] = max(covMapData[key][2])

            with PdfPages(filenames[i][:filenames[i].rfind('.')] + '_heatmap' + ".pdf") as pdf:
                plt.figure()
                for j in range(len(heatMapData[2])):
                    x, y = original_ekf[0]['x'][j], original_ekf[0]['y'][j]
                    red = heatMapData[2][j] / maxData if maxData != 0 else 0
                    blue = 1 - red
                    plt.plot(x, y, color=(red, 0, blue), marker='.')
                plt.title('Pose Estimation Error in XY-Plane')
                plt.xlabel('X (m)')
                plt.ylabel('Y (m)')
                plt.xlim(-20, 20)
                plt.ylim(-20, 20)
                pdf.savefig()
                plt.close()

                plt.figure()
                for j in range(len(heatMapData[2])):
                    x, z = original_ekf[0]['x'][j], original_ekf[0]['z'][j]
                    red = heatMapData[2][j] / maxData if maxData != 0 else 0
                    blue = 1 - red
                    plt.plot(x, z, color=(red, 0, blue), marker='.')
                plt.title('Pose Estimation Error in XZ-Plane')
                plt.xlabel('X (m)')
                plt.ylabel('Z (m)')
                plt.xlim(-20, 20)
                plt.ylim(-20, 20)
                pdf.savefig()
                plt.close()

                plt.figure()
                for j in range(len(heatMapData[2])):
                    y, z = original_ekf[0]['y'][j], original_ekf[0]['z'][j]
                    red = heatMapData[2][j] / maxData if maxData != 0 else 0
                    blue = 1 - red
                    plt.plot(y, z, color=(red, 0, blue), marker='.')
                plt.title('Pose Estimation Error in YZ-Plane')
                plt.xlabel('Y (m)')
                plt.ylabel('Z (m)')
                plt.xlim(-20, 20)
                plt.ylim(-20, 20)
                pdf.savefig()
                plt.close()

                plt.figure()
                for j in range(len(heatMapData[2])):
                    x, y = original_ekf[0]['x'][j], original_ekf[0]['y'][j]
                    red = covMapData['p'][2][j] / \
                        covMaxData['p'] if covMaxData['p'] != 0 else 0
                    blue = 1 - red
                    plt.plot(x, y, color=(red, 0, blue), marker='.')
                plt.title('Position Covariance in XY-Plane')
                plt.xlabel('X (m)')
                plt.ylabel('Y (m)')
                plt.xlim(-20, 20)
                plt.ylim(-20, 20)
                pdf.savefig()
                plt.close()

                plt.figure()
                for j in range(len(heatMapData[2])):
                    x, y = original_ekf[0]['x'][j], original_ekf[0]['y'][j]
                    red = covMapData['v'][2][j] / \
                        covMaxData['v'] if covMaxData['v'] != 0 else 0
                    blue = 1 - red
                    plt.plot(x, y, color=(red, 0, blue), marker='.')
                plt.title('Velocity Covariance in XY-Plane')
                plt.xlabel('X (m)')
                plt.ylabel('Y (m)')
                plt.xlim(-20, 20)
                plt.ylim(-20, 20)
                pdf.savefig()
                plt.close()

                plt.figure()
                for j in range(len(heatMapData[2])):
                    x, y = original_ekf[0]['x'][j], original_ekf[0]['y'][j]
                    red = covMapData['o'][2][j] / \
                        covMaxData['o'] if covMaxData['o'] != 0 else 0
                    blue = 1 - red
                    plt.plot(x, y, color=(red, 0, blue), marker='.')
                plt.title('Orientation Covariance in XY-Plane')
                plt.xlabel('X (m)')
                plt.ylabel('Y (m)')
                plt.xlim(-20, 20)
                plt.ylim(-20, 20)
                pdf.savefig()
                plt.close()

args = parse_args()
filenames, ekfs, original_ekf = csv_to_dictionaries(args)
generate_pdfs(filenames, ekfs, original_ekf, args)
